import logging

import click

from ....rest import software_builds

LOGGER = logging.getLogger(__name__)


@click.group(name="build")
def main():
    "Commands for querying software build records"


@main.command(name="find_by_id")
@click.argument("id")
def find_by_id(id):
    """Retrieve a software build record by its ID"""
    print(software_builds.find_by_id(id))


@main.command(name="find")
@click.option(
    "--software_build_id",
    default="",
    help="The ID of the software build record",
)
@click.option(
    "--software_version_id",
    default="",
    help="The ID of the software version to find build records of",
)
@click.option(
    "--build_job_id",
    default="",
    help="The cromwell job id for the job that built that generated the build",
)
@click.option(
    "--status",
    default="",
    help="The status of the build job. Statuses include: aborted, created, expired, failed, "
    "queued_in_cromwell, running, starting, submitted, succeeded, and waiting_for_queue_space",
)
@click.option(
    "--image_url",
    default="",
    help="The URL indicating the location where the Docker image generated by the build is hosted",
)
@click.option(
    "--created_before",
    default="",
    help="Upper bound for software build's created_at value, in the format "
    "YYYY-MM-DDThh:mm:ss.ssssss",
)
@click.option(
    "--created_after",
    default="",
    help="Lower bound for software build's created_at value, in the format "
    "YYYY-MM-DDThh:mm:ss.ssssss",
)
@click.option(
    "--finished_before",
    default="",
    help="Upper bound for software build's finished_at value, in the format "
    "YYYY-MM-DDThh:mm:ss.ssssss",
)
@click.option(
    "--finished_after",
    default="",
    help="Lower bound for software build's finished_at value, in the format "
    "YYYY-MM-DDThh:mm:ss.ssssss",
)
@click.option(
    "--sort",
    default="",
    help="A comma-separated list of sort keys, enclosed in asc() for ascending or desc() for "
    "descending.  Ex. asc(software_name),desc(created_at)",
)
@click.option(
    "--limit",
    default=20,
    show_default=True,
    help="The maximum number of software build records to return",
)
@click.option(
    "--offset",
    default=0,
    show_default=True,
    help="The offset to start at within the list of records to return.  Ex. Sorting by "
    "asc(created_at) with offset=1 would return records sorted by when they were created "
    "starting from the second record to be created",
)
def find(
    software_build_id,
    software_version_id,
    build_job_id,
    status,
    image_url,
    created_before,
    created_after,
    finished_before,
    finished_after,
    sort,
    limit,
    offset,
):
    """Retrieve software build records filtered to match the specified parameters"""
    print(
        software_builds.find(
            software_build_id,
            software_version_id,
            build_job_id,
            status,
            image_url,
            created_before,
            created_after,
            finished_before,
            finished_after,
            sort,
            limit,
            offset,
        )
    )
